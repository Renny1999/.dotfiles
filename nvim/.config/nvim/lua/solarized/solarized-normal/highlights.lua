local M = {}
local cmd = vim.cmd
local g = vim.g
local o = vim.o
local fn = vim.fn
local utils = require('solarized.utils')
local colors
local hl = vim.api.nvim_set_hl

cmd('hi clear')

utils.default_settings()

if fn.exists("syntax_on") then
	cmd('syntax reset')
end

g.colors_name = 'solarized'
local dark1   = '#3c3836'
local dark2   = '#504945'
local dark3   = '#665c54'
local dark4   = '#7c6f64'
local aqua    = '#689d6a'
local blue    = '#458588'
local grey    = '#83a598'
local dark    = '#1d2021'
local dark0   = '#32302f'
local white   = '#FFFFFF'
local onedark_bg = '#1e1e1e'
local yellow = '#ffff00'
--
function M.load_syntax(colors)
	local syntax = {}

	hl(0,'Normal',{fg=colors.base1,bg=utils.darkbg(colors.base03)})
	hl(0,'FoldColumn',{fg=colors.base0,bg=utils.termtrans(colors.base02)})
	hl(0,'Folded',{fg=colors.base0,bg=utils.termtrans(colors.base02), bold = true})
	hl(0,'Terminal', { link = 'Normal' })
	hl(0,'ToolbarButton',{fg=colors.base1,bg=utils.termtrans(colors.base02), bold = true})
	hl(0,'ToolbarLine',{fg=colors.none,bg=utils.termtrans(colors.base02)})
	-- hl(0,'CursorLine',{fg=colors.none,bg=utils.termtrans(colors.base02)})
	-- hl(0,'CursorLine',{fg=colors.none,bg=colors.base02})
	-- hl(0,'CursorLine',{fg=colors.none,bg=dark0})
  hl(0,'CursorLine',{fg=colors.none,bg=colors.base02})

	-- hl(0,'CursorLine',{fg=colors.none,bg=colors.base02})
	-- hl(0,'LineNr',{fg=colors.base00,bg=utils.darkbg(colors.base03)})
	hl(0,'LineNr',{fg=colors.base0,bg=utils.darkbg(colors.base03)})
	hl(0,'FloatBorder',{fg=colors.base1, bg=colors.none})

  hl(0,'DiffAdd',{fg=colors.green,bg=colors.base02})
  hl(0,'DiffChange',{fg=colors.yellow,bg=colors.base02})
  hl(0,'DiffDelete',{fg=colors.red,bg=colors.base02, bold = true})
  hl(0,'DiffText',{fg=colors.blue,bg=colors.base02})

  hl(0,'StatusLine',{fg=colors.base0,bg=colors.base02, reverse = true})
  hl(0,'StatusLineNC',{fg=colors.base01,bg=colors.base02, reverse = true})
  hl(0,'TabLine',{fg=colors.base01,bg=colors.base02, reverse = true})
  hl(0,'TabLineFill',{fg=colors.base01,bg=colors.base02, reverse = true})
  hl(0,'TabLineSel',{fg=colors.base0,bg=colors.base02, reverse = true})
  hl(0,'VertSplit',{fg=colors.base01})

  -- hl(0,'CursorLineNr',{fg=yellow,bg=utils.darkbgNr(colors.base02), bold = true})
  hl(0,'CursorLineNr',{fg=yellow,bg=utils.darkbgNr(colors.base03), bold = true})
  -- hl(0,'LineNr',{fg=colors.base00,bg=utils.darkbg(colors.base02)})
  hl(0,'LineNr',{fg=colors.base0,bg=utils.darkbg(colors.base03)})
  hl(0,'NonText',{fg=colors.base00, bold = true})
  hl(0,'SpecialKey',{fg=colors.base00,bg=colors.base02, bold = true})
  hl(0,'SpellBad',{fg=colors.violet, undercurl = true})
  hl(0,'SpellCap',{fg=colors.violet, undercurl = true})
  hl(0,'SpellLocal',{fg=colors.yellow, undercurl = true})
  hl(0,'SpellRare',{fg=colors.cyan, undercurl = true})
  hl(0,'Title',{fg=colors.orange, bold = true})

	hl(0,'ColorColumn',{fg=colors.none,bg=colors.base02})
	hl(0,'Conceal',{fg=colors.blue})
	hl(0,'CursorColumn',{fg=colors.none,bg=colors.base02})
	hl(0,'Directory',{fg=colors.blue})
	hl(0,'EndOfBuffer',{fg=colors.none,ctermfg=colors.none,ctermbg=colors.none})
	hl(0,'ErrorMsg',{fg=colors.red,bg=colors.err_bg, reverse = true})
	hl(0,'IncSearch',{fg=colors.orange, standout = true})
	hl(0,'MatchParen',{fg=colors.base3,bg=colors.base02, bold = true})
	hl(0,'ModeMsg',{fg=colors.blue})
	hl(0,'MoreMsg',{fg=colors.blue})
	-- hl(0,'Pmenu',{fg=colors.base1,bg=colors.base02})
	hl(0,'Pmenu',{fg=colors.base1,bg=colors.none})
	hl(0,'Pmenu',{fg=colors.base1,bg=onedark_bg})
	hl(0,'PmenuSbar',{fg=colors.none,bg=colors.base01})
	hl(0,'PmenuSel',{fg=colors.base2,bg=colors.base00})
	hl(0,'PmenuThumb',{fg=colors.none,bg=colors.base0})
	hl(0,'Question',{fg=colors.cyan, bold = true})
	hl(0,'Search',{fg=colors.yellow, reverse = true})
	hl(0,'SignColumn',{fg=colors.base0})
	hl(0,'Visual',{fg=colors.base01,bg=colors.base03, reverse = true})
	hl(0,'VisualNOS',{fg=colors.none,bg=colors.base02, reverse = true})
	hl(0,'WarningMsg',{fg=colors.orange, bold = true})
	hl(0,'WildMenu',{fg=colors.base2,bg=colors.base02, reverse = true})
	hl(0,'Comment',{fg=colors.base01, italic = true})
	hl(0,'Constant',{fg=colors.cyan})
	hl(0,'CursorIM',{fg=colors.none,bg=colors.base1})
	hl(0,'Error',{fg=colors.red,bg=colors.err_bg, bold = true, reverse = true})
	-- hl(0,'Identifier',{fg=colors.blue})
	hl(0,'Identifier',{fg=colors.blue})
	hl(0,'Ignore',{fg=colors.none,ctermfg=colors.none,ctermbg=colors.none})
	hl(0,'PreProc',{fg=colors.orange})
	hl(0,'Special',{fg=colors.orange})
	hl(0,'Statement',{fg=colors.green})
	hl(0,'Todo',{fg=colors.magenta, bold = true})
	hl(0,'Type',{fg=colors.yellow})
	hl(0,'Text',{fg=colors.cyan})
	hl(0,'Strikethrough',{fg=colors.base01,strikethrough=true})
	hl(0,'Underlined',{fg=colors.violet})
	hl(0,'NormalMode',{fg=colors.base0,bg=colors.base3, reverse = true})
	hl(0,'InsertMode',{fg=colors.cyan,bg=colors.base3, reverse = true})
	hl(0,'ReplaceMode',{fg=colors.orange,bg=colors.base3, reverse = true})
	hl(0,'VisualMode',{fg=colors.magenta,bg=colors.base3, reverse = true})
	hl(0,'CommandMode',{fg=colors.magenta,bg=colors.base3, reverse = true})
	hl(0,'vimCommentString',{fg=colors.violet})
	hl(0,'vimCommand',{fg=colors.yellow})
	hl(0,'vimCmdSep',{fg=colors.blue, bold = true})
	hl(0,'helpExample',{fg=colors.base1})
	hl(0,'helpOption',{fg=colors.cyan})
	hl(0,'helpNote',{fg=colors.magenta})
	hl(0,'helpVim',{fg=colors.magenta})
	hl(0,'helpHyperTextJump',{fg=colors.blue})
	hl(0,'helpHyperTextEntry',{fg=colors.green})
	hl(0,'vimIsCommand',{fg=colors.base00})
	hl(0,'vimSynMtchOpt',{fg=colors.yellow})
	hl(0,'vimSynType',{fg=colors.cyan})
	hl(0,'vimHiLink',{fg=colors.blue})
	hl(0,'vimHiGroup',{fg=colors.blue})
	hl(0,'vimGroup',{fg=colors.blue, bold = true})
	hl(0,'gitcommitComment',{fg=colors.base01, italic = true})
	hl(0,'gitcommitUnmerged',{fg=colors.green, bold = true})
	hl(0,'gitcommitOnBranch',{fg=colors.base01, bold = true})
	hl(0,'gitcommitBranch',{fg=colors.magenta, bold = true})
	hl(0,'gitcommitdiscardedtype',{fg=colors.red})
	hl(0,'gitcommitselectedtype',{fg=colors.green})
	hl(0,'gitcommitHeader',{fg=colors.base01})
	hl(0,'gitcommitUntrackedFile',{fg=colors.cyan, bold = true})
	hl(0,'gitcommitDiscardedFile',{fg=colors.red, bold = true})
	hl(0,'gitcommitSelectedFile',{fg=colors.green, bold = true})
	hl(0,'gitcommitUnmergedFile',{fg=colors.yellow, bold = true})
	hl(0,'gitcommitFile',{fg=colors.base0, bold = true})
	hl(0,'htmlTag',{fg=colors.base01})
	hl(0,'htmlEndTag',{fg=colors.base01})
	hl(0,'htmlTagN',{fg=colors.base1, bold = true})
	hl(0,'htmlTagName',{fg=colors.blue, bold = true})
	hl(0,'htmlSpecialTagName',{fg=colors.blue, italic = true})
	hl(0,'htmlArg',{fg=colors.base00})
	hl(0,'javaScript',{fg=colors.yellow})
	hl(0,'perlHereDoc',{fg=colors.base1})
	hl(0,'perlVarPlain',{fg=colors.yellow})
	hl(0,'perlStatementFileDesc',{fg=colors.cyan})
	hl(0,'texstatement',{fg=colors.cyan})
	hl(0,'texmathzonex',{fg=colors.yellow})
	hl(0,'texmathmatcher',{fg=colors.yellow})
	hl(0,'texreflabel',{fg=colors.yellow})
	hl(0,'rubyDefine',{fg=colors.base1, bold = true})
	hl(0,'rubyBoolean',{fg=colors.magenta})
	hl(0,'cPreCondit',{fg=colors.orange})
	hl(0,'VarId',{fg=colors.blue})
	hl(0,'ConId',{fg=colors.yellow})
	hl(0,'hsImport',{fg=colors.magenta})
	hl(0,'hsString',{fg=colors.base00})
	hl(0,'hsStructure',{fg=colors.cyan})
	hl(0,'hs_hlFunctionName',{fg=colors.blue})
	hl(0,'hsStatement',{fg=colors.cyan})
	hl(0,'hsImportLabel',{fg=colors.cyan})
	hl(0,'hs_OpFunctionName',{fg=colors.yellow})
	hl(0,'hs_DeclareFunction',{fg=colors.orange})
	hl(0,'hsVarSym',{fg=colors.cyan})
	hl(0,'hsType',{fg=colors.yellow})
	hl(0,'hsTypedef',{fg=colors.cyan})
	hl(0,'hsModuleName',{fg=colors.green})
	hl(0,'pandocTitleBlock',{fg=colors.blue})
	hl(0,'pandocTitleBlockTitle',{fg=colors.blue, bold = true})
	hl(0,'pandocTitleComment',{fg=colors.blue, bold = true})
	hl(0,'pandocComment',{fg=colors.base01, italic = true})
	hl(0,'pandocVerbatimBlock',{fg=colors.yellow})
	hl(0,'pandocBlockQuote',{fg=colors.blue})
	hl(0,'pandocBlockQuoteLeader1',{fg=colors.blue})
	hl(0,'pandocBlockQuoteLeader2',{fg=colors.cyan})
	hl(0,'pandocBlockQuoteLeader3',{fg=colors.yellow})
	hl(0,'pandocBlockQuoteLeader4',{fg=colors.red})
	hl(0,'pandocBlockQuoteLeader5',{fg=colors.base0})
	hl(0,'pandocBlockQuoteLeader6',{fg=colors.base01})
	hl(0,'pandocListMarker',{fg=colors.magenta})
	hl(0,'pandocListReference',{fg=colors.magenta})
	hl(0,'pandocDefinitionBlock',{fg=colors.violet})
	hl(0,'pandocDefinitionTerm',{fg=colors.violet, standout = true})
	hl(0,'pandocDefinitionIndctr',{fg=colors.violet, bold = true})
	hl(0,'pandocEmphasisDefinition',{fg=colors.violet, italic = true})
	hl(0,'pandocEmphasisNestedDefinition',{fg=colors.violet, bold = true})
	hl(0,'pandocStrongEmphasisDefinition',{fg=colors.violet, bold = true})
	hl(0,'pandocStrongEmphasisNestedDefinition',{fg=colors.violet, bold = true})
	hl(0,'pandocStrongEmphasisEmphasisDefinition',{fg=colors.violet, bold = true})
	hl(0,'pandocStrikeoutDefinition',{fg=colors.violet, reverse = true})
	hl(0,'pandocVerbatimInlineDefinition',{fg=colors.violet})
	hl(0,'pandocSuperscriptDefinition',{fg=colors.violet})
	hl(0,'pandocSubscriptDefinition',{fg=colors.violet})
	hl(0,'pandocTable',{fg=colors.blue})
	hl(0,'pandocTableStructure',{fg=colors.blue})
	hl(0,'pandocTableZebraLight',{fg=colors.blue,bg=colors.base03})
	hl(0,'pandocTableZebraDark',{fg=colors.blue,bg=colors.base02})
	hl(0,'pandocEmphasisTable',{fg=colors.blue, italic = true})
	hl(0,'pandocEmphasisNestedTable',{fg=colors.blue, bold = true})
	hl(0,'pandocStrongEmphasisTable',{fg=colors.blue, bold = true})
	hl(0,'pandocStrongEmphasisNestedTable',{fg=colors.blue, bold = true})
	hl(0,'pandocStrongEmphasisEmphasisTable',{fg=colors.blue, bold = true})
	hl(0,'pandocStrikeoutTable',{fg=colors.blue, reverse = true})
	hl(0,'pandocVerbatimInlineTable',{fg=colors.blue})
	hl(0,'pandocSuperscriptTable',{fg=colors.blue})
	hl(0,'pandocSubscriptTable',{fg=colors.blue})
	hl(0,'pandocHeading',{fg=colors.orange, bold = true})
	hl(0,'pandocHeadingMarker',{fg=colors.orange, bold = true})
	hl(0,'pandocEmphasisHeading',{fg=colors.orange, bold = true})
	hl(0,'pandocEmphasisNestedHeading',{fg=colors.orange, bold = true})
	hl(0,'pandocStrongEmphasisHeading',{fg=colors.orange, bold = true})
	hl(0,'pandocStrongEmphasisNestedHeading',{fg=colors.orange, bold = true})
	hl(0,'pandocStrongEmphasisEmphasisHeading',{fg=colors.orange, bold = true})
	hl(0,'pandocStrikeoutHeading',{fg=colors.orange, reverse = true})
	hl(0,'pandocVerbatimInlineHeading',{fg=colors.orange, bold = true})
	hl(0,'pandocSuperscriptHeading',{fg=colors.orange, bold = true})
	hl(0,'pandocSubscriptHeading',{fg=colors.orange, bold = true})
	hl(0,'pandocLinkDelim',{fg=colors.base01})
	hl(0,'pandocLinkLabel',{fg=colors.blue})
	hl(0,'pandocLinkText',{fg=colors.blue})
	hl(0,'pandocLinkURL',{fg=colors.base00})
	hl(0,'pandocLinkTitle',{fg=colors.base00})
	hl(0,'pandocLinkTitleDelim',{fg=colors.base01})
	hl(0,'pandocLinkDefinition',{fg=colors.cyan})
	hl(0,'pandocLinkDefinitionID',{fg=colors.blue, bold = true})
	hl(0,'pandocImageCaption',{fg=colors.violet, bold = true})
	hl(0,'pandocFootnoteLink',{fg=colors.green})
	hl(0,'pandocFootnoteDefLink',{fg=colors.green, bold = true})
	hl(0,'pandocFootnoteInline',{fg=colors.green, bold = true})
	hl(0,'pandocFootnote',{fg=colors.green})
	hl(0,'pandocCitationDelim',{fg=colors.magenta})
	hl(0,'pandocCitation',{fg=colors.magenta})
	hl(0,'pandocCitationID',{fg=colors.magenta})
	hl(0,'pandocCitationRef',{fg=colors.magenta})
	hl(0,'pandocStyleDelim',{fg=colors.base01})
	hl(0,'pandocEmphasis',{fg=colors.base0, italic = true})
	hl(0,'pandocEmphasisNested',{fg=colors.base0, bold = true})
	hl(0,'pandocStrongEmphasis',{fg=colors.base0, bold = true})
	hl(0,'pandocStrongEmphasisNested',{fg=colors.base0, bold = true})
	hl(0,'pandocStrongEmphasisEmphasis',{fg=colors.base0, bold = true})
	hl(0,'pandocStrikeout',{fg=colors.base01, reverse = true})
	hl(0,'pandocVerbatimInline',{fg=colors.yellow})
	hl(0,'pandocSuperscript',{fg=colors.violet})
	hl(0,'pandocSubscript',{fg=colors.violet})
	hl(0,'pandocRule',{fg=colors.blue, bold = true})
	hl(0,'pandocRuleLine',{fg=colors.blue, bold = true})
	hl(0,'pandocEscapePair',{fg=colors.red, bold = true})
	hl(0,'pandocCitationRef',{fg=colors.magenta})
	hl(0,'pandocNonBreakingSpace',{fg=colors.red, reverse = true})
	hl(0,'pandocMetadataDelim',{fg=colors.base01})
	hl(0,'pandocMetadata',{fg=colors.blue})
	hl(0,'pandocMetadataKey',{fg=colors.blue})
	hl(0,'pandocMetadata',{fg=colors.blue, bold = true})

	hl(0,'Boolean', { link = 'Constant' })
	hl(0,'Character', { link = 'Constant' })
	hl(0,'Conditional', { link = 'Statement' })
	hl(0,'Debug', { link = 'Special' })
	hl(0,'Define', { link = 'PreProc' })
	hl(0,'Delimiter', { link = 'Special' })
	hl(0,'Exception', { link = 'Statement' })
	hl(0,'Float', { link = 'Constant' })
	-- hl(0,'Function', { link = 'Identifier' })
	hl(0,'Function',{fg=colors.blue})
	hl(0,'Include', { link = 'PreProc' })
	hl(0,'Keyword', { link = 'Statement' })
	hl(0,'Label', { link = 'Statement' })
	hl(0,'Macro', { link = 'PreProc' })
	hl(0,'Number', { link = 'Constant' })
	hl(0,'Operator', { link = 'Statement' })
	hl(0,'PreCondit', { link = 'PreProc' })
	hl(0,'QuickFixLine', { link = 'Search' })
	hl(0,'Repeat', { link = 'Statement' })
	hl(0,'SpecialChar', { link = 'Special' })
	hl(0,'SpecialComment', { link = 'Special' })
	hl(0,'StatusLineTerm', { link = 'StatusLine' })
	hl(0,'StatusLineTermNC', { link = 'StatusLineNC' })
	hl(0,'StorageClass', { link = 'Type' })
	hl(0,'String', { link = 'Text' })
	hl(0,'Structure', { link = 'Type' })
	hl(0,'Tag', { link = 'Special' })
	hl(0,'Typedef', { link = 'Type' })
	hl(0,'lCursor', { link = 'Cursor' })
	hl(0,'vimVar', { link = 'Identifier' })
	hl(0,'vimFunc', { link = 'Function' })
	hl(0,'vimUserFunc', { link = 'Function' })
	hl(0,'helpSpecial', { link = 'Special' })
	hl(0,'vimSet', { link = 'Normal' })
	hl(0,'vimSetEqual', { link = 'Normal' })
	hl(0,'diffAdded', { link = 'Statement' })
	hl(0,'diffLine', { link = 'Identifier' })
	hl(0,'gitcommitUntracked', { link = 'gitcommitComment' })
	hl(0,'gitcommitDiscarded', { link = 'gitcommitComment' })
	hl(0,'gitcommitSelected', { link = 'gitcommitComment' })
	hl(0,'gitcommitNoBranch', { link = 'gitcommitBranch' })
	hl(0,'gitcommitDiscardedArrow', { link = 'gitcommitDiscardedFile' })
	hl(0,'gitcommitSelectedArrow', { link = 'gitcommitSelectedFile' })
	hl(0,'gitcommitUnmergedArrow', { link = 'gitcommitUnmergedFile' })
	hl(0,'jsFuncCall', { link = 'Function' })
	hl(0,'rubySymbol', { link = 'String' })
	hl(0,'hsImportParams', { link = 'Delimiter' })
	hl(0,'hsDelimTypeExport', { link = 'Delimiter' })
	hl(0,'hsModuleStartLabel', { link = 'hsStructure' })
	hl(0,'hsModuleWhereLabel', { link = 'hsModuleStartLabel' })
	hl(0,'pandocVerbatimBlockDeep', { link = 'pandocVerbatimBlock' })
	hl(0,'pandocCodeBlock', { link = 'pandocVerbatimBlock' })
	hl(0,'pandocCodeBlockDelim', { link = 'pandocVerbatimBlock' })
	hl(0,'pandocTableStructureTop', { link = 'pandocTableStructre' })
	hl(0,'pandocTableStructureEnd', { link = 'pandocTableStructre' })
	hl(0,'pandocEscapedCharacter', { link = 'pandocEscapePair' })
	hl(0,'pandocLineBreak', { link = 'pandocEscapePair' })
	hl(0,'pandocMetadataTitle', { link = 'pandocMetadata' })

	-- TreeSitter
	-- hl(0,'TSAnnotation', { link = '' })
	hl(0,'TSBoolean', { link = 'Constant' })
	hl(0,'TSCharacter', { link = 'Constant' })
	hl(0,'TSComment', { link = 'Comment' })
	hl(0,'TSConditional', { link = 'Conditional' })
	hl(0,'TSConstant', { link = 'Constant' })
	hl(0,'TSConstBuiltin', { link = 'Constant' })
	hl(0,'TSConstMacro', { link = 'Constant' })
	hl(0,'TSError',{fg=colors.red})
	hl(0,'TSException', { link = 'Exception' })
	hl(0,'TSField', { link = 'Identifier' })
	hl(0,'TSFloat', { link = 'Float' })
	hl(0,'TSFunction', { link = 'Function' })
	hl(0,'TSFuncBuiltin', { link = 'Function' })
	hl(0,'TSFuncMacro', { link = 'Function' })
	hl(0,'TSInclude', { link = 'Include' })
	hl(0,'TSKeyword', { link = 'Keyword' })
	hl(0,'TSLabel', { link = 'Label' })
	hl(0,'TSMethod', { link = 'Function' })
	hl(0,'TSNamespace', { link = 'Identifier' })
	hl(0,'TSNumber', { link = 'Constant' })
	hl(0,'TSOperator', { link = 'Operator' })
	hl(0,'TSParameterReference', { link = 'Identifier' })
	-- hl(0,'TSProperty', { link = 'TSField' })
	hl(0,'TSProperty',{fg=colors.green})
	hl(0,'TSPunctDelimiter', { link = 'Delimiter' })
	hl(0,'TSPunctBracket', { link = 'Delimiter' })
	hl(0,'TSPunctSpecial', { link = 'Special' })
	hl(0,'TSRepeat', { link = 'Repeat' })
	hl(0,'TSString', { link = 'Constant' })
	hl(0,'TSStringRegex', { link = 'Constant' })
	hl(0,'TSStringEscape', { link = 'Constant' })
	hl(0,'TSStrong',{fg=colors.base1,bg=colors.base03, bold = true})
	hl(0,'TSConstructor', { link = 'Function' })
	hl(0,'TSKeywordFunction', { link = 'Identifier' })
	hl(0,'TSLiteral', { link = 'Normal' })
	hl(0,'TSParameter', { link = 'Identifier' })
	hl(0,'TSVariable',{fg=colors.base1})
	hl(0,'TSVariableBuiltin', { link = 'Identifier' })
	hl(0,'TSTag', { link = 'Special' })
	hl(0,'TSTagDelimiter', { link = 'Delimiter' })
	hl(0,'TSTitle', { link = 'Title' })
	hl(0,'TSType', { link = 'Type' })
	hl(0,'TSTypeBuiltin', { link = 'Type' })
	-- hl(0,'TSEmphasis', { link = '' })

	-- BEGIN Neovim >= 0.8
	-- Misc {{{
	hl(0,'@comment', { link = 'Comment' })
	hl(0,'@error',{fg=colors.red})
	hl(0,'@none', { link = 'NONE' })
	hl(0,'@preproc', { link = 'PreProc' })
	hl(0,'@define', { link = 'Define' })
	-- hl(0,'@operator', { link = 'Operator' })
	hl(0,'@operator',{fg=colors.green})
	-- }}}

	-- Punctuation {{{
	hl(0,'@punctuation.delimiter', { link = 'Statement' })
	-- hl(0,'@punctuation.bracket', { link = 'Delimiter' })
	hl(0,'@punctuation.bracket',{fg=colors.base1})
	hl(0,'@punctuation.special', { link = 'Delimiter' })
	-- }}}

	-- Literals {{{
	hl(0,'@string', { link = 'String' })
	hl(0,'@string.regex', { link = 'String' })
	hl(0,'@string.escape', { link = 'Special' })
	hl(0,'@string.special', { link = 'Special' })

	hl(0,'@character', { link = 'Character' })
	hl(0,'@character.special', { link = 'Special' })

	hl(0,'@boolean', { link = 'Boolean' })
	hl(0,'@number', { link = 'Number' })
	hl(0,'@float', { link = 'Float' })
	-- }}}

	-- Functions {{{
	hl(0,'@function', { link = 'Function' })
	hl(0,'@function.call', { link = 'Function' })
	hl(0,'@function.builtin', { link = 'Function' })
	hl(0,'@function.macro', { link = 'Macro' })

	hl(0,'@method', { link = 'Function' })
	hl(0,'@method.call', { link = 'Function' })

	hl(0,'@constructor', { link = 'Special' })
	hl(0,'@parameter', { link = 'Normal' })
	-- }}}

	-- Keywords {{{
	hl(0,'@keyword', { link = 'Keyword' })
	hl(0,'@keyword.function', { link = 'Keyword' })
	hl(0,'@keyword.operator', { link = 'Keyword' })
	hl(0,'@keyword.return', { link = 'Keyword' })

	hl(0,'@conditional', { link = 'Conditional' })
	hl(0,'@repeat', { link = 'Repeat' })
	hl(0,'@debug', { link = 'Debug' })
	hl(0,'@label', { link = 'Label' })
	hl(0,'@include', { link = 'Include' })
	hl(0,'@exception', { link = 'Exception' })
	-- }}}

	-- Types {{{
	-- hl(0,'@type', { link = 'Type' })
	hl(0,'@type', { link = 'String' })
	-- hl(0,'@type.builtin', { link = 'Type' })
	hl(0,'@type.builtin', { link = 'String' })
	hl(0,'@type.qualifier', { link = 'Type' })
	hl(0,'@type.definition', { link = 'Typedef' })

	hl(0,'@storageclass', { link = 'StorageClass' })
	hl(0,'@attribute', { link = 'Identifier' })
	hl(0,'@field',{fg=colors.green})
	-- hl(0,'@field', { link = 'Identifier' })
	-- hl(0,'@property', { link = 'Identifier' })
	-- hl(0,'@property',{fg=colors.green})
	hl(0,'@property',{fg=colors.base1})
	-- }}}

	-- Identifiers {{{
	hl(0,'@variable',{fg=colors.base1})
	hl(0,'@variable.builtin', { link = 'Special' })

	hl(0,'@constant', { link = 'Constant' })
	-- hl(0,'@constant.builtin', { link = 'Type' })
	hl(0,'@constant.builtin', { link = 'String' })
	hl(0,'@constant.macro', { link = 'Define' })

	hl(0,'@namespace', { link = 'Identifier' })
	hl(0,'@symbol', { link = 'Identifier' })
	-- }}}

	-- Text {{{
	hl(0,'@text', { link = 'Normal' })
	hl(0,'@text.strong',{fg=colors.base1,bg=colors.base03, bold = true})
	hl(0,'@text.emphasis',{fg=colors.base1,bg=colors.base03, bold = true})
	hl(0,'@text.underline', { link = 'Underlined' })
	hl(0,'@text.strike', { link = 'Strikethrough' })
	hl(0,'@text.title', { link = 'Title' })
	hl(0,'@text.literal', { link = 'String' })
	hl(0,'@text.uri', { link = 'Underlined' })
	hl(0,'@text.math', { link = 'Special' })
	hl(0,'@text.environment', { link = 'Macro' })
	hl(0,'@text.environment.name', { link = 'Type' })
	hl(0,'@text.reference', { link = 'Constant' })

	hl(0,'@text.todo', { link = 'Todo' })
	hl(0,'@text.note', { link = 'WarningMsg' })
	hl(0,'@text.warning', { link = 'WarningMsg' })
	hl(0,'@text.danger',{fg=colors.red, bold = true})
	-- }}}

	-- Tags {{{
	hl(0,'@tag', { link = 'Tag' })
	hl(0,'@tag.attribute', { link = 'Identifier' })
	hl(0,'@tag.delimiter', { link = 'Delimiter' })
	-- }}}
	-- END Neovim >= 0.8

	hl(0,'DiagnosticError',{fg=colors.red})
	hl(0,'DiagnosticWarn',{fg=colors.yellow})
	hl(0,'DiagnosticInfo',{fg=colors.cyan})
	hl(0,'DiagnosticHint',{fg=colors.green})
	hl(0,'DiagnosticUnderlineError',{fg=colors.none, underline = true})
	hl(0,'DiagnosticUnderlineWarn',{fg=colors.none, underline = true})
	hl(0,'DiagnosticUnderlineInfo',{fg=colors.none, underline = true})
	hl(0,'DiagnosticUnderlineHint',{fg=colors.none, underline = true})

	hl(0,'LspReferenceRead',{fg=colors.none, underline = true})
	hl(0,'LspReferenceText', { link = 'LspReferenceRead' })
	hl(0,'LspReferenceWrite',{fg=colors.none, underline = true, bold = true})

	-- Lspsaga
	hl(0,'LspSagaFinderSelection', { link = 'Search' })
	hl(0,'TargetWord', { link = 'Title' })

	hl(0,'GitSignsAdd', { link = 'DiffAdd' })
	hl(0,'GitSignsChange', { link = 'DiffChange' })
	hl(0,'GitSignsDelete', { link = 'DiffDelete' })

	hl(0,'VGitSignAdd', { link = 'DiffAdd' })
	hl(0,'VgitSignChange', { link = 'DiffChange' })
	hl(0,'VGitSignRemove', { link = 'DiffDelete' })

	-- nvim-cmp syntax support
	hl(0,'CmpDocumentation' ,{fg=colors.base2, bg=colors.base02 })
	hl(0,'CmpDocumentationBorder' ,{fg=colors.base2, bg=colors.base02 })

	hl(0,'CmpItemAbbr' ,{fg=colors.base1, bg=colors.none })
	hl(0,'CmpItemAbbrDeprecated' ,{fg=colors.base0, bg=colors.none })
	hl(0,'CmpItemAbbrMatch' ,{fg=colors.base2, bg=colors.none })
	hl(0,'CmpItemAbbrMatchFuzzy' ,{fg=colors.base2, bg=colors.none })

	hl(0,'CmpItemKindDefault' ,{fg=colors.base1, bg=colors.none })
	hl(0,'CmpItemMenu' ,{fg=colors.base1, bg=colors.none })
	hl(0,'CmpItemKindKeyword' ,{fg=colors.yellow, bg=colors.none })
	hl(0,'CmpItemKindVariable' ,{fg=colors.green, bg=colors.none })
	hl(0,'CmpItemKindConstant' ,{fg=colors.base1, bg=colors.none })
	hl(0,'CmpItemKindReference' ,{fg=colors.base1, bg=colors.none })
	hl(0,'CmpItemKindValue' ,{fg=colors.base1, bg=colors.none })
	hl(0,'CmpItemKindFunction' ,{fg=colors.blue, bg=colors.none })
	hl(0,'CmpItemKindMethod' ,{fg=colors.blue, bg=colors.none })
	hl(0,'CmpItemKindConstructor' ,{fg=colors.blue, bg=colors.none })
	hl(0,'CmpItemKindClass' ,{fg=colors.red, bg=colors.none })
	hl(0,'CmpItemKindInterface' ,{fg=colors.base1, bg=colors.none })
	hl(0,'CmpItemKindStruct' ,{fg=colors.base1, bg=colors.none })
	hl(0,'CmpItemKindEvent' ,{fg=colors.base1, bg=colors.none })
	hl(0,'CmpItemKindEnum' ,{fg=colors.base1, bg=colors.none })
	hl(0,'CmpItemKindUnit' ,{fg=colors.base1, bg=colors.none })
	hl(0,'CmpItemKindModule' ,{fg=colors.base1, bg=colors.none })
	hl(0,'CmpItemKindProperty' ,{fg=colors.base1, bg=colors.none })
	hl(0,'CmpItemKindField' ,{fg=colors.base1, bg=colors.none })
	hl(0,'CmpItemKindTypeParameter' ,{fg=colors.base1, bg=colors.none })
	hl(0,'CmpItemKindEnumMember' ,{fg=colors.base1, bg=colors.none })
	hl(0,'CmpItemKindOperator' ,{fg=colors.base1, bg=colors.none })
	hl(0,'CmpItemKindSnippet' ,{fg=colors.orange, bg=colors.none })

	hl(0,'NavicIconsFile', { link = 'CmpItemKindFile' })
	hl(0,'NavicIconsModule', { link = 'CmpItemKindModule' })
	hl(0,'NavicIconsNamespace', { link = 'CmpItemKindModule' })
	hl(0,'NavicIconsPackage', { link = 'CmpItemKindModule' })
	hl(0,'NavicIconsClass', { link = 'CmpItemKindClass' })
	hl(0,'NavicIconsMethod', { link = 'CmpItemKindMethod' })
	hl(0,'NavicIconsProperty', { link = 'CmpItemKindProperty' })
	hl(0,'NavicIconsField', { link = 'CmpItemKindField' })
	hl(0,'NavicIconsConstructor', { link = 'CmpItemKindConstructor' })
	hl(0,'NavicIconsEnum', { link = 'CmpItemKindEnum' })
	hl(0,'NavicIconsInterface', { link = 'CmpItemKindInterface' })
	hl(0,'NavicIconsFunction', { link = 'CmpItemKindFunction' })
	hl(0,'NavicIconsVariable', { link = 'CmpItemKindVariable' })
	hl(0,'NavicIconsConstant', { link = 'CmpItemKindConstant' })
	hl(0,'NavicIconsString', { link = 'String' })
	hl(0,'NavicIconsNumber', { link = 'Number' })
	hl(0,'NavicIconsBoolean', { link = 'Boolean' })
	hl(0,'NavicIconsArray', { link = 'CmpItemKindClass' })
	hl(0,'NavicIconsObject', { link = 'CmpItemKindClass' })
	hl(0,'NavicIconsKey', { link = 'CmpItemKindKeyword' })
	hl(0,'NavicIconsKeyword', { link = 'CmpItemKindKeyword' })
	hl(0,'NavicIconsNull', {fg=colors.blue, bg=colors.none })
	hl(0,'NavicIconsEnumMember', { link = 'CmpItemKindEnumMember' })
	hl(0,'NavicIconsStruct', { link = 'CmpItemKindStruct' })
	hl(0,'NavicIconsEvent', { link = 'CmpItemKindEvent' })
	hl(0,'NavicIconsOperator', { link = 'CmpItemKindOperator' })
	hl(0,'NavicIconsTypeParameter', { link = 'CmpItemKindTypeParameter' })
	hl(0,'NavicText', { link = 'LineNr' })
	hl(0,'NavicSeparator', { link = 'Comment' })

  hl(0,'TelescopeMatching',{fg=colors.cyan})

	-- for group, highlights in pairs(syntax) do
	-- 	utils.highlighter(group, highlights)
	-- end
end

function M.terminal_colors(colors)
	g.terminal_color_0 = colors.base02[1] -- '#073642'
	g.terminal_color_1 = colors.red[1] -- '#dc322f'
	g.terminal_color_2 = colors.green[1] -- '#859900'
	g.terminal_color_3 = colors.yellow[1] -- '#b58900'
	g.terminal_color_4 = colors.blue[1] -- '#268bd2'
	g.terminal_color_5 = colors.magenta[1] -- '#d33682'
	g.terminal_color_6 = colors.cyan[1] -- '#2aa198'
	g.terminal_color_7 = colors.base2[1] -- '#eee8d5'
	g.terminal_color_8 = colors.base03[1] -- '#002b36'
	g.terminal_color_9 = colors.orange[1] -- '#cb4b16'
	g.terminal_color_10 = colors.base01[1] -- '#586e75'
	g.terminal_color_11 = colors.base00[1] -- '#657b83'
	g.terminal_color_12 = colors.base0[1] -- '#839496'
	g.terminal_color_13 = colors.violet[1] -- '#6c71c4'
	g.terminal_color_14 = colors.base1[1] -- '#93a1a1'
	g.terminal_color_15 = colors.base3[1] -- '#fdf6e3'
end

return M
